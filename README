# Documentation Project Zahlenschloss 
## 1. Contributors
- Kai Kustermann (kk147)
- Hannes Frey (hf018)
## 2. Project Description
(TODO: Hier bild von safe einf√ºgen)

The project implements a safe using an ATmega328P as microcontroller, a 4x4 matrix keypad to capture user input and an LCD display as output to display important information about the state of the system. Two LEDs are used to indicate if the safe is open or closed. A DC locking bolt acts as mechanic mechanism for closing and opening the lock, which operates using a mosfet. Optionally a buzzer can be added to give auditory feedback to the user.     
The project is written in C using AVR-GCC as compiler without any additional libraries as external dependencies.
## 3. Hardware Setup
### 3.1 Circuit Diagram
### 3.2 Chassis and 3D Printing
## 4. Software Setup
The project is exclusively written in C using AVR-GCC as compiler without any additional libraries as external dependencies. For flashing, the software AVRDUDE is used. The tool Make is used for automating the build and deployment process. It is recommended to use VSCode as code editor, as it was used during the development of the project and this documentation contains some useful settings for getting started with development using VSCode.        
### 4.1 Download AVR-GCC
Download the AVR-GPP compiler and toolchain for the operating system of your development machine. It is recommended to use the latest version 3.7.0. The official version can be found on the [Microchip website](https://www.microchip.com/en-us/tools-resources/develop/microchip-studio/gcc-compilers).
### 4.2 Download AVRDUDE
Download AVRDUDE for the operating system of your development machine. Please refer to the official [GitHub Repository](https://github.com/avrdudes/avrdude) for detailed installation steps.
### 4.3 Download Make
For the build and deployment process, the tool Make is used. Download Make for the operating system of your development machine.
- Windows:  
    - Download make from [this website](https://gnuwin32.sourceforge.net/packages/make.htm) and follow the installation process
    - Add Make to system PATH environment variable
- Linux:    
    `
    sudo apt install make
    `
### 4.4 Logging Setup
For logging messages on the development machine, a USB serial connection from the ATmega328P to the development machine is used. On Windows, we recommend using PuTTY for opening a terminal to the serial port. On Linux the screen command can be used.
- Windows:  
    - Download PuTTY from [the official website](https://putty.org/) and follow the installation process
    - Configure the serial line as follows:
    ![PuTTY settings](./assets/putty.png)       
    - **Important:**    
    If you want to change the COM port to a port of your choice, make sure to also change the variable `PROGRAMMER_PORT` in the Makefile.
- Linux:        
Use the `screen` command to receive serial data. The syntax is as follows:   
`screen [DEVICE NAME] [BAUDRATE]`,  
where the defined baudrate for the atmega328 is 9600.
### 4.5 VSCode Setup (Optional)
VSCode can give a nice development experience by providing helpful features like IntelliSense. Here is an example `c_cpp_properties.json` for configuring the editor on windows.
```json
{
    "configurations": [
        {
            "name": "win32",
            "includePath": [
                "${workspaceFolder}/**",
                "C:\\path\\to\\your\\avr\\download\\avr",
            ],
            "defines": [
                "__AVR_ATmega328P__",
                "F_CPU=16000000UL"
            ],
            "macFrameworkPath": [],
            "compilerPath": "C:\\path\\to\\your\\avr\\download\\bin\\avr-gcc -xc -E -v -",
            "cStandard": "c11",
            "cppStandard": "gnu++14",
            "intelliSenseMode": "clang-x64"
        }
    ],
    "version": 4
}
```
## 5. Deployment
## 6. Code
## 7. Operation Manual
## 8. Credits and Sources